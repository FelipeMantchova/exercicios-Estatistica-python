# -*- coding: utf-8 -*-
"""Ex2_Estatistica_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZMoLjyA951m1mme8p3iIOOtX9Nz-jSd

# Distribuição de Probabilidade &mdash; Atividade Prática

**Prof. Dr. Jefferson O. Andrade**  
**Pós-graduação em Desenvolvimento de Aplicações Inteligentes**  
**Estatística para Aprendizado de Máquina — Aula 02**

**Nome:** Felipe Mantovanelli Barros  
**Matrícula:** 20231DEVAI0025

## Introdução à atividade

Nesta atividade, vamos explorar diferentes distribuições de probabilidade. Usaremos as bibliotecas numpy e scipy para gerar os dados, e matplotlib e seaborn para visualizar os resultados.

Vamos começar importando as bibliotecas necessárias:
"""

import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns

"""## Distribuição Normal

Vamos começar gerando dados para uma distribuição normal, que é uma distribuição de probabilidade contínua. A distribuição normal é parametrizada pela média (mu) e o desvio padrão (sigma). Vamos definir mu=0 e sigma=1.
"""

mu, sigma = 0, 1
normal_dist = np.random.normal(mu, sigma, 1000)
sns.histplot(normal_dist, kde=True, color='blue')
plt.title('Distribuição Normal')
plt.show()

"""## Distribuição Binomial

Agora vamos gerar dados para uma distribuição binomial, que é uma distribuição de probabilidade discreta. Vamos definir n (número de tentativas) como 10 e p (probabilidade de sucesso) como 0.5.
"""

n, p = 10, 0.5
binomial_dist = np.random.binomial(n, p, 1000)
sns.histplot(binomial_dist, kde=False, color='green')
plt.title('Distribuição Binomial')
plt.show()

"""## Distribuição de Poisson

Finalmente, vamos gerar dados para uma distribuição de Poisson, que também é uma distribuição de probabilidade discreta. Vamos definir lambda (taxa de ocorrência dos eventos) como 3.
"""

lam = 3
poisson_dist = np.random.poisson(lam, 1000)
sns.histplot(poisson_dist, kde=False, color='red')
plt.title('Distribuição de Poisson')
plt.show()

"""## Acompanhamento da atividade

Agora que geramos e visualizamos diferentes distribuições de probabilidade, experimentem alterar os parâmetros dessas distribuições e vejam como eles afetam a forma da distribuição.

Além disso, pense em diferentes cenários do mundo real que podem ser modelados por essas distribuições. Por exemplo, a distribuição binomial pode ser usada para modelar o número de caras obtidas ao lançar uma moeda várias vezes. Que outros cenários vocês conseguem pensar?

## Obervações

...
"""

#Histograma de dados coletados sobre o tempo de resposta de um servidor para 1000 solicitações

tempos_resposta = np.random.normal(180, 20, 1000)

plt.hist(tempos_resposta, bins=20, density=True, alpha=0.6, color='b')
plt.xlabel('Tempo de Resposta (ms)')
plt.ylabel('Densidade')
plt.title('Distribuição dos Tempos de Resposta')
plt.show()

#Binomial
#Esse exemplo mostra com clareza como funciona a distribuição para duas jogadas
#Ele foi essencial para explicar melhor a matéria para os colegas.
#Coroa = C, Cara = K
#CC, CK, KC, KK
#CK = KC
#Ou seja a distribuição deve ser ~50% para CK/KC, 25% CC e 25% KK
n, p = 2, 0.5
binomial_dist = np.random.binomial(n, p, 10000)
sns.histplot(binomial_dist, kde=False, color='green')
plt.title('Distribuição Binomial')
plt.show()

#Poisson
#Em uma lanchonete, quero saber quantos clientes são atendidos em um dia
lam = 50
poisson_dist = np.random.poisson(lam, 1000)
sns.histplot(poisson_dist, kde=False, color='red')
plt.title('Distribuição de Poisson')
plt.show()